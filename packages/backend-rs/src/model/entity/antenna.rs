//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use super::sea_orm_active_enums::AntennaSrc;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
#[sea_orm(table_name = "antenna")]
#[macros::export(object, js_name = "Antenna")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTimeWithTimeZone,
    #[sea_orm(column_name = "userId")]
    pub user_id: String,
    pub name: String,
    pub src: AntennaSrc,
    #[sea_orm(column_name = "userListId")]
    pub user_list_id: Option<String>,
    #[sea_orm(column_name = "withFile")]
    pub with_file: bool,
    pub expression: Option<String>,
    pub notify: bool,
    #[sea_orm(column_name = "caseSensitive")]
    pub case_sensitive: bool,
    #[sea_orm(column_name = "withReplies")]
    pub with_replies: bool,
    #[sea_orm(column_name = "userGroupJoiningId")]
    pub user_group_joining_id: Option<String>,
    pub users: Vec<String>,
    pub instances: Vec<String>,
    pub keywords: Vec<String>,
    #[sea_orm(column_name = "excludeKeywords")]
    pub exclude_keywords: Vec<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    User,
    #[sea_orm(
        belongs_to = "super::user_group_joining::Entity",
        from = "Column::UserGroupJoiningId",
        to = "super::user_group_joining::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    UserGroupJoining,
    #[sea_orm(
        belongs_to = "super::user_list::Entity",
        from = "Column::UserListId",
        to = "super::user_list::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    UserList,
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::user_group_joining::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserGroupJoining.def()
    }
}

impl Related<super::user_list::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserList.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
